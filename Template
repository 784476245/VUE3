<!-- html -->
<template>
  <!-- 属性绑定，v-bind:可缩写为: -->
  <!-- 可使用动态参数[xxx]，属性类型随着xxx名称改变而改变；若xxx="href"，则为:href -->
  <div v-bind:class="x" :id="x" :[xxx]="x" :title="x"></div>
  <!-- 事件绑定，v-on:可缩写为@ -->
  <!-- 可使用动态参数[xxx]，事件类型随着xxx名称改变而改变；若xxx="blur"，则为@blur -->
  <div v-on:click="x" @change="x" @[xxx]="x"></div>
  <!-- v-html用于内嵌html页面，不安全（使用v-dompurify-html代替） -->
  <div v-html="x"></div>
  <!-- $event可以把事件传递到js中进行处理 -->
  <button @click="one(xxx, $event), two(xxx, $event)"></button>
  <!-- 表单 <input>、<textarea> 及 <select> 元素上创建双向数据绑定，修改页面的内容会返回到model绑定的xxx中 -->
  <input v-model="xxx" />
  <!-- v-if/v-else-if/v-else切换条件，切换时事件和子组件会被销毁，适用于很少改变的对象 -->
  <div v-if="xxx"></div>
  <div v-else="xxxx"></div>
  <!-- v-show的元素始终会保留在dom中，是只单纯切换显示，适用于频繁切换的对象 -->
  <div v-show="xxx">
    <!-- $t国际化 -->
    {{ $t('xxx') }}
  </div>
  <!-- title和key是该组件传递给子组件props的参数，使用:可以动态绑定，用于父→子参数传递 -->
  <template-one title="xxx" :key="xxx"></template-one>
  <!-- @abc是子组件$emit事件传递给该组件的，使用method接收结果，用于子→父参数传递 -->
  <template-two @abc="method"></template-two>
  <!-- 插槽，供父组件引入该组件时内嵌内容，具体内嵌方法参考template-three -->
  <slot name="1"></slot>
  <slot></slot>
  <!-- 插槽，引用子组件时使用,将template里的内容传递给子组件（非具名插槽不需要template），v-slot:对应子组件的slot name（默认default） -->
  <template-three>
    <template v-slot:1>
      <button></button>
    </template>
    <template v-slot:defalut>
      <a></a>
    </template>
  </template-three>
  <!-- 使用子组件，添加ref属性注册到$refs -->
  <xx-xx ref="xxxx"></xx-xx>
</template>

<!-- js -->
<script>
// 引入其他子组件
import xxxx from '@/xxxx';
// 引入其他js的公共方法，在js中以exp()的方式使用，被引用处使用export function exp(){}的形式定义
import { exp } from '@/method';
export default {
  name: 'component-template', // 父组件调用时使用该名字<component-template></component-template>
  components: { xxxx }, // 配合上文import中引入的组件名，在html中以xx-xx的方式使用
  props: {
    // 父组件传递给该组件的参数，用于父→子参数传递
    xxx: String,
    yyy: Number,
    zzz: Object,
  },
  // 组件返回的数据，可以在该组件方法和html中使用
  data() {
    return {
      param1: null,
      param2: null,
    };
  },
  // 计算属性，配合{{}}模板使用，相比methods减少开销，只会在相关响应式依赖发生改变时重新求值。只要相关响应式依赖没有发生改变，多次访问时会立即返回之前的计算结果，而不必再次执行函数
  computed: {
    compute1() {},
  },
  // 监听器，在相关参数发生改变时执行
  watch: {
    param1(newVal, oldVal) {},
    param2: {
      handler(newVal, oldVal) {}, // 配合deep和immediate使用
      deep: true, // 深度监听，修改对象的某个字段也能监听到
      immediate: true, // 第一次绑定值，是否执行
    },
  },
  created() {}, // 在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图
  mounted() {}, // 在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作（例如document.getElementById的使用）
  // 组件定义的方法，可供本组件其他方法和html调用
  methods: {
    method1() {
      this.$refs.xxxx.yyy(); // 对于html中的<xx-xx ref="xxxx"></xx-xx>，this.$refs.xxx能获取子组件的data和method，用于子→父参数传递,父组件主动
      this.$refs.xxxx.zzz;
    },
    method2(param) {
      this.$emit('abc', this.param1); // 发送abc给父组件使用，父组件使用@abc=yyy来接收结果，this.param1为yyy的第一个参数，用于子→父参数传递,子组件主动
    },
    method3(param) {
      this.$mybus.emit('abc', this.param1); // 事务总线广播事务
      this.$mybus.on('abc', (data) => {
        console.log(data);
      }); // 事务总线接收事务
      this.$mybus.$off('abc'); // 事务总线移除事务
    },
  },
  provide() {
    // 该组件传递给多层次子组件使用，用于父→多层次子参数传递
    return {};
  },
  inject: [], // 多层次父组件传递给该组件使用，用于父→多层次子参数传递
};
</script>

<!-- scoped，只能在该vue文件范围内进行使用，避免污染外部样式 -->
<style scoped></style>
<!-- css 可以使用外部引入的方式，@默认为src目录，~@不需要加后缀格式，@需要加后缀格式 -->
<!-- scss有层级关系，跟平铺的css样式不同，同样可以限制样式范围避免污染 -->
<style lang="scss">
import '@/xxx/xxx.scss';
</style>

1.父组件往子组件传递数据（搜索关键词props）：父组件使用:xxx动态绑定，子组件定义props接收后使用。多层级调用建议使用provide和inject
2.子组件往父组件传递数据（搜索关键词$emit）：子组件使用this.$emit('xxx')发送，父组件使用@xxx接收结果
3.父组件直接操作子组件（搜索关键词$refs）：父组件使用this.$refs.xxx获取子组件的data和method 4.事务总线new
mitt()，emit广播，on接收，off移除
