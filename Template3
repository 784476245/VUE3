<template>
  <!-- 属性绑定，v-bind:可缩写为: -->
  <!-- 可使用动态参数[xxx]，属性类型随着xxx名称改变而改变；若xxx="href"，则为:href -->
  <div v-bind:class="x" :id="x" :[xxx]="x" :title="x"></div>

  <!-- 事件绑定，v-on:可缩写为@ -->
  <!-- 可使用动态参数[xxx]，事件类型随着xxx名称改变而改变；若xxx="blur"，则为@blur -->
  <div v-on:click="x" @change="x" @[xxx]="x"></div>

  <!-- 事件处理常用后缀 -->
  <!-- .stop：阻止冒泡（通俗讲就是阻止事件向上级DOM元素传递） -->
  <!-- .prevent：阻止默认事件的发生 -->
  <!-- .capture：捕获冒泡，即有冒泡发生时，有该修饰符的dom元素会先执行，如果有多个，从外到内依次执行，然后再按自然顺序执行触发的事件。 -->
  <!-- .self：将事件绑定到自身，只有自身才能触发，通常用于避免冒泡事件的影响 -->
  <!-- .once：设置事件只能触发一次，比如按钮的点击等。 -->
  <!-- .native：在父组件中给子组件绑定一个原生的事件，就将子组件变成了普通的HTML标签，不加'.native'事件是无法触发的。 -->
  <div @keyup.enter="xxx"></div> <!-- 按键事件触发 -->
  <div @keydown.alt="xxx"></div>

  <!-- v-html用于内嵌html页面，不安全（使用v-dompurify-html代替） -->
  <div v-dompurify-html="x"></div>

  <!-- v-for实现循环，一般都需要带上key，方便跟踪节点和排序 -->
  <div v-for="item in ref2" :key="item.id">
    <!-- 内容 -->
  </div>

  <!-- 使用特殊的 $event 变量，将事件属性传递到script中进行处理 -->
  <button @click="func1('Form cannot be submitted yet.', $event)">
    Submit
  </button>

  <!-- 跨组件参数传递 -->
  <!-- 例：title和key是该组件传递给子组件props的参数，使用:可以动态绑定，用于父→子参数传递 -->
  <!-- 例：@abc是子组件$emit事件传递给该组件的，该组件使用method方法接收结果，用于子→父参数传递 -->
  <child title="xxx" :key="xxx" @abc="method"></child>

  <!-- 插槽定义 -->
  <slot name="xxx"></slot>
  <child>
    <!-- 传入插槽内容，v-slot:可以简写为#，xxx可以改为[xxx]动态名称 -->
    <template #xxx></template>
  </child>

  <!-- {{xxx}}，常用于计算属性和数据动态展示 -->
  <div>
    <p>{{ computed1 }}</p>
  </div>

  <!-- 添加ref属性可使用子组件内部属性 -->
  <xx-xx ref="ref2"></xx-xx>
</template>

<script setup>
import {
  computed,
  defineProps,
  defineEmits,
  defineExpose,
  nextTick,
  onBeforeMount,
  onBeforeUnmount,
  onMounted,
  onUnmounted,
  onUpdated,
  reactive,
  ref, watch, provide, inject
} from "vue";
import Child from "@/components/Child";

/**
 * 响应式变量定义和使用
 */
const ref1 = ref({name: 'Tom', age: 15}); // 响应式变量，操作时需要携带value：ref.value.name
const reactive1 = reactive({value: 0});  // 只能用于对象类型的响应式变量，不可用于string/number等基本类型，
                                                // 注意：reactive重新赋值,就会丢失原来响应式对象的引用地址,变成一个新的引用地址（例：reactive = xxx）

const ref2 = ref();                             // 对应上方模板中ref="ref2"的定义，在此处定义后可以使用子组件暴露出来的方法和变量
defineExpose({ ref1 })                  // 定义暴露成员，可被父组件使用

/**
 * 接收父组件传入的数据
 */
const props = defineProps({
  value1: {
    type: Number,
    default: 1,
  },
  value2: {
    type: Function,
  },
});
/**
 * 定义发送给父组件的事件
 */
const emits = defineEmits(['emit1', 'emit2']);
const emitFunc = ()=> {
  emits('emit1', 'res') // 发送事件
}
/**
 * 定义发送给子孙组件的数据
 */
provide('ref1', ref1);           // 将该参数传递到深层级子组件
/**
 * 接收祖先组件传入的数据
 */
const mes = inject('ref1')  // 获取祖先组件传递的数据，一般如果要修改父组件的值，建议在父组件中定义方法，子组件调用，保持数据更改来源一致性

/**
 * computed 计算属性，用于响应式依赖发生变化时同步刷新该变量，常用于模板动态刷新
 * @type {ComputedRef<string>}
 */
const computed1 = computed(() => {
  return ref2.value.name ? 'Yes' : 'No'; //计算属性中使用 reverse() 和 sort() 的时候务必小心！这两个方法将变更原始数组，计算函数中不应该这么做。
                                         // 请在调用这些方法之前创建一个原数组的副本：return [...numbers].reverse()
})

/**
 * watch 监听函数，在监听值发生变化时执行
 */
watch(ref1, (newVal, oldVal) => {     // 可以监听ref/value/array等，value：() => {ref1.value}，array：[ref1, ref2]
                                          // 监听ref会自动深度监听，监听value只有对象被替换时才会触发，可以手动加deep
      return newVal > oldVal;             // 监听最好不要放异步回调里，否则需要手动销毁：const a = watch();a();
    },
    {
      deep: true,                         // 是否使用深度监听
      immediate: true,                    // 初始化时是否生效
    },)

/**
 * 异步调用
 */
const asyncFunc = async ()=> { // 声明是异步方法，注意：async方法返回的是promise对象，不能直接拿来比较！得用then或者await接受结果
  let i = await asyncFunc();   // await能让异步方法等待，拿到结果再继续流程，只能放在async方法里
};

/**
 * DOM 更新循环结束之后执行延迟回调
 */
const func1 = ()=> {
  nextTick(() => {
    // 放入到nextTick的回调函数里能保证在下一次DOM刷新后再执行里面的内容
    // 多用于：1.页面还没初始化完成（created/mounted）；2.同步流程中改变元素但是无法同步获取，放到该方法里异步刷新DOM后再执行逻辑
    ref1.value += 1;
    reactive1.value += 1;
  })
}

onBeforeMount(() => {
}) // 注册一个钩子，在组件被挂载之前被调用。
onMounted(() => {
}) // 注册一个回调函数，在组件挂载完成后执行。
onUpdated(() => {
}) // 注册一个回调函数，在组件因为响应式状态变更而更新其 DOM 树之后调用。
onBeforeUnmount(() => {
}) // 注册一个钩子，在组件实例被卸载之前调用。
onUnmounted(() => {
}) // 注册一个回调函数，在组件实例被卸载之后调用。
</script>

<!-- scoped，只能在该vue文件范围内进行使用，避免污染外部样式 -->
<style scoped></style>
<!-- css 可以使用外部引入的方式，@默认为src目录，~@不需要加后缀格式，@需要加后缀格式 -->
<!-- scss有层级关系，跟平铺的css样式不同，同样可以限制样式范围避免污染 -->
<style lang="scss">
import '@/xxx/xxx.scss';
</style>
